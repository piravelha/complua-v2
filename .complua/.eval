_G["#COMPLUA"] = _G["#COMPLUA"] or {}

_G["#COMPLUA"].serialize = function(o)
  if type(o) == "string" then
    return '"' .. o .. '"'
  end
  if type(o) == "table" then
    local s = "{"
    local i = 1
    for k, v in pairs(o) do
      if i > 1 then
        s = s .. ", "
      end
      s = s .. "[" .. _G["#COMPLUA"].serialize(k) .. "] = " .. _G["#COMPLUA"].serialize(v)
      i = i + 1
    end
    return s .. "}"
  end
  if type(o) == "function" then
    local bytes = string.dump(o)
    local s = "load(string.char("
    for i = 1, #bytes do
      if i > 1 then
        s = s .. ", "
      end
      s = s .. tostring(string.byte(bytes, i))
    end
    return s .. "))"
  end
  return tostring(o)
end

local function nameof(obj)
  if type(obj) ~= "table" then
    return nil
  end
  return obj["#NAME"]
end

local file = io.open(".complua/.eval.temp", "w")

local framerate = 60;
local function map(tbl, fn)
local new = {
};
for idx, it in pairs(tbl) do
new[idx] = fn(it);

end
return new;
end
local function main()
local array = {
1,
2,
3,
};
local new = map(array, function(x)

return x * framerate;
end);
for idx, it in pairs(new) do
print(it);

end

end

local __eval = { main() };
file:write(_G['#COMPLUA'].serialize(__eval));
file:close();
