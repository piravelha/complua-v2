{
  "name": "CompLua",
  "scopeName": "source.clua",
  "fileTypes": ["clua"],
  "patterns": [
      {
          "include": "#comments"
      },
      {
          "include": "#functions"
      },
      {
          "include": "#keywords"
      },
      {
          "include": "#storages"
      },
      {
          "include": "#constants"
      },
      {
          "include": "#numbers"
      },
      {
          "include": "#strings"
      },
      {
          "include": "#variables"
      }
  ],
  "repository": {
      "comments": {
          "patterns": [
              {
                  "name": "comment.line.clua",
                  "match": "--.*$"
              },
              {
                  "name": "comment.block.clua",
                  "begin": "--\\[\\[",
                  "end": "\\]\\]"
              }
          ]
      },
      "functions": {
          "patterns": [
              {
                  "name": "entity.name.function.clua",
                  "match": "\\b[a-zA-Z_][a-zA-Z_0-9]*\\s*(?=\\()"
              }
          ]
      },
      "keywords": {
          "patterns": [
              {
                  "name": "keyword.control.clua",
                  "match": "\\b(if|then|else|elseif|end|while|do|repeat|until|for|in|function|return|break|continue|struct|of)\\b"
              }
          ]
      },
      "storages": {
          "patterns": [
              {
                  "name": "storage.type.clua",
                  "match": "\\b(local)\\b|#(eval|using|inline|check|load|repr|defer)\\b"
              }
          ]
      },
      "constants": {
          "patterns": [
              {
                  "name": "constant.language.clua",
                  "match": "\\b(true|false|nil)\\b"
              }
          ]
      },
      "numbers": {
          "patterns": [
              {
                  "name": "constant.numeric.clua",
                  "match": "-?\\d+(\\.\\d+)?"
              }
          ]
      },
      "strings": {
          "patterns": [
              {
                  "name": "string.quoted.double.clua",
                  "begin": "\"",
                  "end": "\""
              },
              {
                  "name": "string.quoted.single.clua",
                  "begin": "'",
                  "end": "'"
              }
          ]
      },
      "variables": {
          "patterns": [
              {
                  "name": "variable.other.clua",
                  "match": "!?\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
              }
          ]
      }
  }
}
